var helpers = require("../../../../../../.nvm/versions/node/v14.17.1/lib/node_modules/parcel/node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
helpers.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ProfileView", ()=>ProfileView
);
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _axios = require("axios");
var _axiosDefault = parcelHelpers.interopDefault(_axios);
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _reactBootstrap = require("react-bootstrap");
var _profileViewScss = require("./profile-view.scss");
class ProfileView extends _reactDefault.default.Component {
    constructor(){
        super();
        this.state = {
            Name: null,
            Username: null,
            Password: null,
            Email: null,
            Birthdate: null,
            FavoriteMovies: [],
            validated: null
        };
    }
    componentDidMount() {
        const accessToken = localStorage.getItem('token');
        if (accessToken !== null) this.getUser(accessToken);
    }
    getUser(token) {
        const username = localStorage.getItem('user');
        _axiosDefault.default.get('http://my-flix-48028.herokuapp.com/users', {
            headers: {
                Authorization: `Bearer ${token}`
            }
        }).then((response)=>{
            this.setState({
                Name: response.data.Name,
                Username: response.data.Username,
                Password: response.data.Password,
                Email: response.data.Email,
                Birthdate: response.data.Birthdate,
                FavoriteMovies: response.data.FavoriteMovies
            });
        }).catch(function(error) {
            console.log(error);
        });
    }
    removeFavoriteMovie() {
        const token = localStorage.getItem('token');
        const username = localStorage.getItem('user');
        _axiosDefault.default.delete('http://my-flix-48028.herokuapp.com/users/${username}/movies/${movie._id}', {
            headers: {
                Authorization: `Bearer ${token}`
            }
        }).then(()=>{
            alert('Movie was removed');
            this.componentDidMount();
        }).catch(function(error) {
            console.log(error);
        });
    }
    handleUpdate(e, newName, newUsername, newPassword, newEmail, newBirthdate) {
        this.setState({
            validated: null
        });
        const form = e.currentTarget;
        if (form.checkValidity() === false) {
            e.preventDefault();
            e.stopPropagation();
            this.setState({
                validated: true
            });
            return;
        }
    }
}

  helpers.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}